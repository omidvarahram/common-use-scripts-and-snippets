// Consumption:
// ./custom-npm-adduser.js --username my-user --password my-pass --email my-email@example.com --auth-type legacy

#!/usr/bin/env node

const http = require("http");
const https = require("https");
const fs = require("fs");
const path = require("path");

// Parse command-line arguments
const args = process.argv.slice(2);
const options = {};
for (let i = 0; i < args.length; i += 2) {
  const key = args[i].replace("--", "");
  const value = args[i + 1];
  options[key] = value;
}

// Validate required arguments
if (!options.username || !options.password || !options.email) {
  console.error("Error: --username, --password, and --email are required.");
  process.exit(1);
}

// Default values
const registry = options.registry || "https://registry.npmjs.org";
const authType = options["auth-type"] || "legacy";

async function addUser() {
  console.log(`Authenticating with registry: ${registry}`);
  console.log(`Auth Type: ${authType}`);

  // Prepare authentication payload
  const authData = JSON.stringify({
    _id: `org.couchdb.user:${options.username}`,
    name: options.username,
    password: options.password,
    email: options.email,
    type: "user",
    roles: [],
    date: new Date().toISOString(),
  });

  // Determine HTTP or HTTPS
  const url = new URL(`${registry}/-/user/org.couchdb.user:${options.username}`);
  const httpModule = url.protocol === "https:" ? https : http;

  // Request options
  const requestOptions = {
    hostname: url.hostname,
    port: url.port || (url.protocol === "https:" ? 443 : 80),
    path: url.pathname,
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
      "Content-Length": Buffer.byteLength(authData),
    },
  };

  // Make the HTTP request
  const request = httpModule.request(requestOptions, (res) => {
    let responseData = "";

    res.on("data", (chunk) => {
      responseData += chunk;
    });

    res.on("end", () => {
      if (res.statusCode === 201 || res.statusCode === 200) {
        console.log("Authentication successful!");

        // Parse the response to get the token
        const responseJson = JSON.parse(responseData);
        const npmrcPath = path.resolve(process.env.HOME || process.env.USERPROFILE, ".npmrc");
        let token;

        if (authType === "legacy") {
          token = Buffer.from(`${options.username}:${responseJson.token}`).toString("base64");
          fs.appendFileSync(npmrcPath, `//${url.host}/:_auth=${token}\n`);
        } else if (authType === "bearer") {
          token = responseJson.token;
          fs.appendFileSync(npmrcPath, `//${url.host}/:_authToken=${token}\n`);
        }

        console.log(`Authentication token saved to ${npmrcPath}`);
      } else {
        console.error(
          `Authentication failed with status ${res.statusCode}:`,
          responseData || res.statusMessage
        );
      }
    });
  });

  request.on("error", (error) => {
    console.error("An error occurred:", error.message);
  });

  request.write(authData);
  request.end();
}

addUser();
